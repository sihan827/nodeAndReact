node package manager는 노드 설치 시 자동으로 설치됨

npm 프로젝트의 생성 방법: npm init 명령어로 폴더 초기화
초기화 시 package.json이라는 프로젝트 정보 관리 json 파일이 생성되며 여기서 프로젝트 명이나 종속성, 스크립트 명령어 등을 관리할 수 있다. 

express 설치: npm을 이용해 간단하게 npm install express로 설치할 수 있다. npm으로 외부 패키지 설치 시 해당 프로젝트의 종속성에 바로 패키지를 추가시켜 준다. package.json 파일의 dependencies 항목에서 확인할 수 있다. 받은 파일은 node_modules 폴더에 저장된다. 

mongoDB: 널리 쓰이는 데이터베이스 중 하나이다. 클라우드 상에 mongoDB를 생성하며 무료 제공 클라우드로는 aws, google cloud, azure가 있다. 서버 지역 선택 및 클러스터의 티어를 선택한 후 이름 등 추가 설정을 마치면 생성할 수 있다. 클러스터를 생성한 후에는 클러스터에 유저를 연결해 주어야 한다. 유저 연결 후에는 어플리케이션을 연결해 주면 된다. 그러면 데이터베이스를 사용할 수 있는 uri를 받을 수 있다. 

mongoose: mongoDB를 편리하게 이용할 수 있도록 돕는 오브젝트 모델링 도구이다. npm을 이용해 쉽게 설치할 수 있다. npm install mongoose 

데이터베이스 모델: 데이터베이스를 사용하기 이전에 정보를 어떤 형식으로 저장할 것인지에 대하여 모델과 스키마를 설계해야 한다. 각 정보에 대한 타입, 길이 등을 스키마로 지정해 주어야 한다. 모델은 스키마를 감싸 준다.

npm 프로젝트를 깃으로 관리하기: node 라이브러리가 저장된 node_modules 폴더는 그 크기가 방대하고 npm이 종속성에 저장된 정보를 통해 따로 설치를 하기 때문에 이를 제외하고 깃에 올리는 것이 일반적이다. .gitignore 파일을 통해 node_modules 폴더를 제외시킬 수 있다.

깃헙과의 연결: 깃헙을 원격저장소로 연결할 때 HTTP, SSH 두 가지 방식이 있다. SSH는 Secure Shell의 약자로 HTTP보다 더 안전한 통신이 가능하다. SSH를 사용하는 방법은 먼저 SSH 키를 만들고 컴퓨터의 SSH 에이전트를 작동시킨 후 만든 프라이빗 키를 에이전트에 등록시킨다. id_rsa는 프라이빗 키이고 id_rsa.pub는 퍼블릭 키이다. 이후 해당 키를 깃헙에 연결시킨다.

클라이언트와 서버와의 통신: 클라이언트에서 정보를 보내면 body-parser라는 외부 패키지를 통해 서버가 받을 수 있는 데이터 형태로 만들 수 있다. 

postman: 현재 컴퓨터는 서버로 동작하고 있으므로 클라이언트의 request를 구현할 수 없기 때문에 postman이라는 api 플랫폼으로 이를 구현한다. postman을 이용하여 url을 입력하고 json형식으로 모델에서 지정한 형식대로 데이터를 보내면 어플리케이션에서 어떻게 동작하는지 확인할 수 있다. 

nodemon: pm2 처럼 서버를 끄지 않아도 수정된 코드를 알아서 적용해준다. 설치 시 --only=dev 키워드로 개발 시에만 사용하도록 한다. 추가적으로 스크립트 설정으로 편하게 작동시킬 수 있도록 한다.

소스 정보 내부의 보안 정보 설정: index.js 내의 mongoDB url 부분은 데이터베이스에 대한 비밀 정보 부분이다. 따라서 이를 .gitignore에 추가하여 깃헙에 올릴 시 처리할 필요가 있다. 또한 환경 변수 process.env.NODE_ENV를 설정하여 로컬 개발 환경에서는 dev.js에서 데이터베이스 URI를 가져가도록 하고 배포 후에는 서버 제공 서비스에서 해당 변수를 따로 제공하도록 구분할 필요가 있다. 이 일련의 과정들을 config 폴더 내의 소스 코드로 진행하도록 하였다.
